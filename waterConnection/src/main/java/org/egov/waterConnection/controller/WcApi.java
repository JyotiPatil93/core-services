/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.8).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.egov.waterConnection.controller;

import java.math.BigDecimal;
import org.egov.waterConnection.model.ErrorRes;
import org.egov.waterConnection.model.RequestInfo;
import org.egov.waterConnection.model.ResponseInfo;
import org.egov.waterConnection.model.WaterConnectionRequest;
import org.egov.waterConnection.model.WaterConnectionResponse;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-10-24T11:22:24.450+05:30[Asia/Kolkata]")
@Api(value = "wc", description = "the wc API")
public interface WcApi {

    @ApiOperation(value = "Deactivate existing water connection.", nickname = "wcCancelPost", notes = "Deactivate existing water connection.", response = ResponseInfo.class, tags={ "Water", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Property deactivated successful", response = ResponseInfo.class),
        @ApiResponse(code = 404, message = "Property not found", response = ErrorRes.class) })
    @RequestMapping(value = "/wc/_cancel",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<ResponseInfo> wcCancelPost(@ApiParam(value = "Request header for the property delete Request." ,required=true )  @Valid @RequestBody RequestInfo body,@NotNull @ApiParam(value = "Unique id for a tenant.", required = true) @Valid @RequestParam(value = "tenantId", required = true) String tenantId,@NotNull @Size(min=4,max=128) @ApiParam(value = "The properrtyId to be deactivated", required = true) @Valid @RequestParam(value = "propertyId", required = true) String propertyId);


    @ApiOperation(value = "Apply for new water connection.", nickname = "wcCreatePost", notes = "Citizen or employee can apply for new water connection. ", response = WaterConnectionResponse.class, tags={ "Water", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Water connection application is submitted sucessfully", response = WaterConnectionResponse.class),
        @ApiResponse(code = 400, message = "Failed to submit application", response = ErrorRes.class) })
    @RequestMapping(value = "/wc/_create",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<WaterConnectionResponse> wcCreatePost(@ApiParam(value = "Details for the new property + RequestHeader meta data." ,required=true )  @Valid @RequestBody WaterConnectionRequest body);


    @ApiOperation(value = "Delete existing water connection.", nickname = "wcDeletePost", notes = "Delete existing water connection.", response = ResponseInfo.class, tags={ "Water", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Deleted water connection successful", response = ResponseInfo.class),
        @ApiResponse(code = 404, message = "Delete Property failed", response = ErrorRes.class) })
    @RequestMapping(value = "/wc/_delete",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<ResponseInfo> wcDeletePost(@ApiParam(value = "Request header for the connection delete Request." ,required=true )  @Valid @RequestBody RequestInfo body,@NotNull @ApiParam(value = "Unique id for a tenant.", required = true) @Valid @RequestParam(value = "tenantId", required = true) String tenantId,@NotNull @Size(min=2,max=64) @ApiParam(value = "The connection no to be deactivated", required = true) @Valid @RequestParam(value = "connectionNo", required = true) String connectionNo);


    @ApiOperation(value = "Get the list of exsting water connections.", nickname = "wcSearchPost", notes = "Get the water connections list based on the input parameters. ", response = WaterConnectionResponse.class, tags={ "Water", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = WaterConnectionResponse.class),
        @ApiResponse(code = 400, message = "Invalid input.", response = ErrorRes.class) })
    @RequestMapping(value = "/wc/_search",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<WaterConnectionResponse> wcSearchPost(@ApiParam(value = "RequestHeader meta data." ,required=true )  @Valid @RequestBody RequestInfo body,@NotNull @ApiParam(value = "Unique id for a tenant.", required = true) @Valid @RequestParam(value = "tenantId", required = true) String tenantId,@ApiParam(value = "List of system generated ids of water connection.") @Valid @RequestParam(value = "ids", required = false) List<String> ids,@ApiParam(value = "List of water connection numbers to search..") @Valid @RequestParam(value = "connectionNo", required = false) List<String> connectionNo,@ApiParam(value = "List of old water connection numbers to search..") @Valid @RequestParam(value = "oldConnectionNo", required = false) List<String> oldConnectionNo,@ApiParam(value = "MobileNumber of owner whose water connection is to be searched.") @Valid @RequestParam(value = "mobileNumber", required = false) Long mobileNumber,@ApiParam(value = "Fetches properties with created time after fromDate.") @Valid @RequestParam(value = "fromDate", required = false) BigDecimal fromDate,@ApiParam(value = "Fetches properties with created time till toDate.") @Valid @RequestParam(value = "toDate", required = false) BigDecimal toDate);


    @ApiOperation(value = "Update existing water connection details.", nickname = "wcUpdatePost", notes = "Updates a given `water connection` with newer details.", response = WaterConnectionResponse.class, tags={ "Water", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Water connection details has been submitted sucessfully with new details", response = WaterConnectionResponse.class),
        @ApiResponse(code = 400, message = "Update water connection details failed", response = ErrorRes.class) })
    @RequestMapping(value = "/wc/_update",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<WaterConnectionResponse> wcUpdatePost(@ApiParam(value = "Request of water connection details." ,required=true )  @Valid @RequestBody WaterConnectionRequest body);

}
